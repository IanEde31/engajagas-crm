import React, { useState } from "react";
import { Pedido } from "@/entities/Pedido";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { ArrowLeft, Plus, Trash2, Save } from "lucide-react";
import { format } from "date-fns";

export default function NovoPedido() {
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    numero: `GAS-${new Date().getFullYear()}-${Math.floor(1000 + Math.random() * 9000)}`,
    cliente: "",
    telefone: "",
    endereco: {
      rua: "",
      numero: "",
      complemento: "",
      bairro: "",
      cidade: "",
      estado: "",
      cep: ""
    },
    itens: [
      {
        produto: "",
        quantidade: 1,
        valor_unitario: 0,
        valor_total: 0
      }
    ],
    pagamento: "Pix",
    parcelas: 1,
    observacoes: "",
    status: "Pedido recebido",
    data_recebimento: new Date().toISOString(),
    data_entrega_prevista: new Date().toISOString()
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleEnderecoChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      endereco: {
        ...prev.endereco,
        [name]: value
      }
    }));
  };

  const handleItemChange = (index, field, value) => {
    const newItens = [...formData.itens];
    newItens[index] = {
      ...newItens[index],
      [field]: value
    };

    // Recalcula o valor total do item
    if (field === 'quantidade' || field === 'valor_unitario') {
      newItens[index].valor_total = 
        Number(newItens[index].quantidade) * Number(newItens[index].valor_unitario);
    }

    setFormData(prev => ({
      ...prev,
      itens: newItens
    }));
  };

  const adicionarItem = () => {
    setFormData(prev => ({
      ...prev,
      itens: [
        ...prev.itens,
        {
          produto: "",
          quantidade: 1,
          valor_unitario: 0,
          valor_total: 0
        }
      ]
    }));
  };

  const removerItem = (index) => {
    if (formData.itens.length === 1) return;
    
    const newItens = formData.itens.filter((_, i) => i !== index);
    setFormData(prev => ({
      ...prev,
      itens: newItens
    }));
  };

  const calcularTotal = () => {
    return formData.itens.reduce((sum, item) => sum + Number(item.valor_total || 0), 0);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      // Calcula o valor total antes de salvar
      const valorTotal = calcularTotal();
      
      const dadosPedido = {
        ...formData,
        valor_total: valorTotal
      };

      await Pedido.create(dadosPedido);
      navigate(createPageUrl("CRM"));
    } catch (error) {
      console.error("Erro ao criar pedido:", error);
      alert("Ocorreu um erro ao criar o pedido. Tente novamente.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Lista de produtos disponíveis
  const produtosDisponiveis = [
    "Gás P13",
    "Gás P13 com vasilhame",
    "Gás P45",
    "Gás P45 com vasilhame",
    "Gás P20",
    "Gás P05",
    "Gás P05 com vasilhame",
    "Kit registro",
    "MANGOTE PARA P45",
    "Água 20L da marca Igarapé"
  ];

  // Valores pré-definidos para produtos
  const valoresProdutos = {
    "Gás P13": 110.0,
    "Gás P13 com vasilhame": 190.0,
    "Gás P45": 350.0,
    "Gás P45 com vasilhame": 550.0,
    "Gás P20": 200.0,
    "Gás P05": 65.0,
    "Gás P05 com vasilhame": 120.0,
    "Kit registro": 25.0,
    "MANGOTE PARA P45": 45.0,
    "Água 20L da marca Igarapé": 15.0
  };

  // Atualiza o valor unitário quando o produto muda
  const handleProdutoChange = (index, value) => {
    handleItemChange(index, 'produto', value);
    const valorPadrao = valoresProdutos[value] || 0;
    handleItemChange(index, 'valor_unitario', valorPadrao);
    handleItemChange(index, 'valor_total', valorPadrao * formData.itens[index].quantidade);
  };

  return (
    <div className="p-4 md:p-6">
      <div className="flex items-center gap-4 mb-6">
        <Button
          variant="outline"
          size="icon"
          onClick={() => navigate(createPageUrl("CRM"))}
        >
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Novo Pedido</h1>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="grid gap-6 mb-6">
          {/* Informações Básicas */}
          <Card>
            <CardHeader>
              <CardTitle>Informações Básicas</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="numero">Número do Pedido</Label>
                  <Input
                    id="numero"
                    name="numero"
                    value={formData.numero}
                    onChange={handleInputChange}
                    readOnly
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="cliente">Nome do Cliente*</Label>
                  <Input
                    id="cliente"
                    name="cliente"
                    value={formData.cliente}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="telefone">Telefone*</Label>
                  <Input
                    id="telefone"
                    name="telefone"
                    value={formData.telefone}
                    onChange={handleInputChange}
                    required
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Endereço */}
          <Card>
            <CardHeader>
              <CardTitle>Endereço de Entrega</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="rua">Rua</Label>
                  <Input
                    id="rua"
                    name="rua"
                    value={formData.endereco.rua}
                    onChange={handleEnderecoChange}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="numero">Número</Label>
                    <Input
                      id="numero"
                      name="numero"
                      value={formData.endereco.numero}
                      onChange={handleEnderecoChange}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="complemento">Complemento</Label>
                    <Input
                      id="complemento"
                      name="complemento"
                      value={formData.endereco.complemento}
                      onChange={handleEnderecoChange}
                    />
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="bairro">Bairro</Label>
                  <Input
                    id="bairro"
                    name="bairro"
                    value={formData.endereco.bairro}
                    onChange={handleEnderecoChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="cidade">Cidade</Label>
                  <Input
                    id="cidade"
                    name="cidade"
                    value={formData.endereco.cidade}
                    onChange={handleEnderecoChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="estado">Estado</Label>
                  <Input
                    id="estado"
                    name="estado"
                    value={formData.endereco.estado}
                    onChange={handleEnderecoChange}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="cep">CEP</Label>
                  <Input
                    id="cep"
                    name="cep"
                    value={formData.endereco.cep}
                    onChange={handleEnderecoChange}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Itens do Pedido */}
          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Itens do Pedido</span>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={adicionarItem}
                >
                  <Plus className="h-4 w-4 mr-2" /> Adicionar Item
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              {formData.itens.map((item, index) => (
                <div key={index} className="grid grid-cols-12 gap-4 items-end">
                  <div className="col-span-12 md:col-span-5 space-y-2">
                    <Label htmlFor={`produto-${index}`}>Produto*</Label>
                    <Select
                      value={item.produto}
                      onValueChange={(value) => handleProdutoChange(index, value)}
                      required
                    >
                      <SelectTrigger id={`produto-${index}`}>
                        <SelectValue placeholder="Selecione um produto" />
                      </SelectTrigger>
                      <SelectContent>
                        {produtosDisponiveis.map((produto) => (
                          <SelectItem key={produto} value={produto}>
                            {produto}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="col-span-3 md:col-span-2 space-y-2">
                    <Label htmlFor={`quantidade-${index}`}>Quantidade</Label>
                    <Input
                      id={`quantidade-${index}`}
                      type="number"
                      min="1"
                      value={item.quantidade}
                      onChange={(e) => handleItemChange(index, 'quantidade', e.target.value)}
                      required
                    />
                  </div>
                  <div className="col-span-4 md:col-span-2 space-y-2">
                    <Label htmlFor={`valor-${index}`}>Valor Unitário</Label>
                    <Input
                      id={`valor-${index}`}
                      type="number"
                      min="0"
                      step="0.01"
                      value={item.valor_unitario}
                      onChange={(e) => handleItemChange(index, 'valor_unitario', e.target.value)}
                      required
                    />
                  </div>
                  <div className="col-span-4 md:col-span-2 space-y-2">
                    <Label>Subtotal</Label>
                    <div className="h-10 px-3 py-2 rounded-md border border-input bg-background text-sm font-medium">
                      R$ {Number(item.valor_total).toFixed(2)}
                    </div>
                  </div>
                  <div className="col-span-1">
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => removerItem(index)}
                      disabled={formData.itens.length === 1}
                    >
                      <Trash2 className="h-4 w-4 text-red-500" />
                    </Button>
                  </div>
                </div>
              ))}

              <div className="flex justify-end mt-4">
                <div className="text-right">
                  <div className="text-sm text-gray-500">Total do Pedido</div>
                  <div className="text-2xl font-bold">R$ {calcularTotal().toFixed(2)}</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Forma de Pagamento */}
          <Card>
            <CardHeader>
              <CardTitle>Forma de Pagamento</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="pagamento">Método de Pagamento*</Label>
                  <Select
                    value={formData.pagamento}
                    onValueChange={(value) => setFormData(prev => ({ ...prev, pagamento: value }))}
                    required
                  >
                    <SelectTrigger id="pagamento">
                      <SelectValue placeholder="Selecione uma forma de pagamento" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Pix">Pix</SelectItem>
                      <SelectItem value="Cartão de crédito">Cartão de crédito</SelectItem>
                      <SelectItem value="Cartão de débito">Cartão de débito</SelectItem>
                      <SelectItem value="Dinheiro">Dinheiro</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {formData.pagamento === "Cartão de crédito" && (
                  <div className="space-y-2">
                    <Label htmlFor="parcelas">Parcelas</Label>
                    <Select
                      value={formData.parcelas.toString()}
                      onValueChange={(value) => setFormData(prev => ({ ...prev, parcelas: Number(value) }))}
                    >
                      <SelectTrigger id="parcelas">
                        <SelectValue placeholder="Selecione o número de parcelas" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1">1x</SelectItem>
                        <SelectItem value="2">2x</SelectItem>
                        <SelectItem value="3">3x</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Observações */}
          <Card>
            <CardHeader>
              <CardTitle>Observações</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                name="observacoes"
                value={formData.observacoes}
                onChange={handleInputChange}
                placeholder="Adicione observações sobre o pedido, se necessário..."
                className="h-32"
              />
            </CardContent>
          </Card>
        </div>

        <div className="flex justify-end gap-4 mb-6">
          <Button
            type="button"
            variant="outline"
            onClick={() => navigate(createPageUrl("CRM"))}
          >
            Cancelar
          </Button>
          <Button
            type="submit"
            className="bg-green-600 hover:bg-green-700"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Salvando...' : (
              <>
                <Save className="h-4 w-4 mr-2" /> Salvar Pedido
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}